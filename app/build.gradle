plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
}

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries

android {
    compileSdk cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    defaultConfig {
        applicationId cfg.applicationId
        minSdk cfg.minSdkVersion
        targetSdk cfg.targetSdk
        versionCode readVersionCode()
        versionName readVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_BASE_URL", project.property('API_BASE_URL_PROD')
        }
        debug {
            debuggable true
            applicationIdSuffix ".dev"
            buildConfigField "String", "API_BASE_URL", project.property('API_BASE_URL_DEV')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    //TESTING
    testImplementation "junit:junit:4.+"
    testImplementation "io.mockk:mockk:${libs.mockk}"
    testImplementation "com.google.truth:truth:${libs.truth}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${libs.coroutines}"
    testImplementation "androidx.arch.core:core-testing:${libs.arch_test}"
    testImplementation "app.cash.turbine:turbine:${libs.turbine}"
    androidTestImplementation "androidx.test.ext:junit:${libs.junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${libs.espresso}"

    //ANDROID CORE + UI
    implementation "androidx.core:core-ktx:${libs.core_ktx}"
    implementation "androidx.appcompat:appcompat:${libs.appcompat}"
    implementation "com.google.android.material:material:${libs.material}"
    implementation "androidx.constraintlayout:constraintlayout:${libs.constraint}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${libs.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:${libs.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${libs.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${libs.lifecycle}"
    implementation "androidx.activity:activity-ktx:${libs.activity}"
    implementation "androidx.fragment:fragment-ktx:${libs.fragment}"

    //COROUTINES
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${libs.coroutines}"
    //PAGINATION
    implementation "androidx.paging:paging-runtime-ktx:${libs.pagination}"
    //NAVIGATION
    implementation "androidx.navigation:navigation-fragment-ktx:${libs.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${libs.navigation}"

    //DEPENDENCY INJECTION
    implementation "com.google.dagger:hilt-android:${libs.hilt}"
    kapt "com.google.dagger:hilt-android-compiler:${libs.hilt}"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:${libs.hilt_viewmodel}"
    kapt "androidx.hilt:hilt-compiler:${libs.hilt_compiler}"

    //RETROFIT
    implementation "com.squareup.retrofit2:retrofit:${libs.retrofit}"
    implementation "com.squareup.retrofit2:converter-gson:${libs.retrofit}"

    //GSON
    implementation "com.google.code.gson:gson:${libs.gson}"

    //GLIDE
    implementation "com.github.bumptech.glide:glide:${libs.glide}"
    kapt "com.github.bumptech.glide:compiler:${libs.glide}"

}

def readVersionCode() {
    def versionCodeFile = new File(project.rootDir, 'version.number')
    return versionCodeFile.getText().toBigInteger()
}

def readVersionName() {
    def versionNameFile = new File(project.rootDir, "version.name")
    return versionNameFile.getText('UTF-8')
}